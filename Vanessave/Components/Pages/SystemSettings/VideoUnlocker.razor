@page "/system-settings/video-unlocker"
@using Vanessave.Nobeta
@using Vanessave.Utils
@using Humanizer
@using Vanessave.Services
@using Vanessave.Utils.Extensions
@inject IJSRuntime JS
@inject SaveCipherProvider SaveCipher
@inject ISnackbar Snackbar

<MudText Typo="Typo.h3" Class="mb-6">Video Unlocker</MudText>

<SavePicker @ref="_savePicker" Label="Pick System Settings (System.dat)"/>

<pre><MudText>
<MudAlert Severity="Severity.Warning" Class="mt-4">A restart of the game is needed in order to unlock the videos.</MudAlert>
</MudText></pre>

<MudText Class="mt-4">This tool allows you to unlock extra bonus videos chapters that are normally unlocked by collecting items.</MudText>

<MudText Class="mt-4">Note that some of those properties are not used by the game. Maybe in a later update?</MudText>

<MudDivider Class="my-4"/>

@if (_systemSettings is null)
{
    <MudText>Load a system settings file first.</MudText>
}
else
{
    <MudPaper Outlined="true">
        <MudCheckBox @bind-Value="@_systemSettings.AllTaniaPropsUnlocked" Label="Tania" Color="Color.Primary" />
        <MudCheckBox @bind-Value="@_systemSettings.AllMonicaPropsUnlocked" Label="Monica" Color="Color.Primary" />
        <MudCheckBox @bind-Value="@_systemSettings.AllVanessaPropsUnlock" Label="Vanessa" Color="Color.Primary" />
        <MudCheckBox @bind-Value="@_systemSettings.AllCatPropsUnlock" Label="Cat" Color="Color.Primary" />
        <MudCheckBox @bind-Value="@_systemSettings.AllNobetaPropsUnlock" Label="Nobeta" Color="Color.Primary" />
    </MudPaper>

    <div class="fab-download">
        <MudTooltip Text="Download modified settings">
            <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Download" @onclick="DownloadSettings"/>
        </MudTooltip>
    </div>
}

@code {
    private SavePicker _savePicker = null!;
    private SystemSettings? _systemSettings;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _savePicker.OnSaveLoad += OnSaveLoad;
        }
    }

    private Task OnSaveLoad(string settings)
    {
        try
        {
            _systemSettings = JsonUtils.LoadSystemSettings(settings);

            StateHasChanged();
        }
        catch
        {
            Snackbar.AddError("Invalid System Settings file, make sure you load \"System.dat\".");
        }

        return Task.CompletedTask;
    }

    private async Task DownloadSettings()
    {
        if (_systemSettings is null)
        {
            return;
        }

        // Write new settings and download it
        var settingsText = JsonUtils.WriteSave(_systemSettings);

        await using var encryptedDataStream = SaveCipher.GetEncryptStream(settingsText);
        using var streamRef = new DotNetStreamReference(encryptedDataStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", "System.dat", streamRef);
    }

    public void Dispose()
    {
        _savePicker.OnSaveLoad -= OnSaveLoad;
    }
}