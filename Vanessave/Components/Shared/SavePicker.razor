@using Vanessave.Utils
@using Vanessave.Components.Models
@using Vanessave.Shared.Services
@implements IDisposable
@inject SaveCipherProvider SaveCipher

<MudFileUpload T="IBrowserFile" Accept="@(AllowJson ? ".dat, .json" : ".dat")" FilesChanged="UploadFiles">
    <ButtonTemplate>
        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload"
                   for="@context.Id">
            @Label
        </MudButton>
    </ButtonTemplate>
</MudFileUpload>

@code {
    public event Func<string, Task>? OnSaveLoad;

    [Parameter]
    public string Label { get; set; } = "Pick a file";

    [Parameter]
    public bool AllowJson { get; set; } = false;

    [Parameter]
    public bool Prettify { get; set; } = false;

    [CascadingParameter]
    public SaveDropContext? SaveDropContext { get; set; }

    public string FileName { get; set; } = "";

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (SaveDropContext is not null)
            {
                SaveDropContext.OnFileDrop += OnFileDrop;
            }
        }
    }

    private async Task UploadFiles(IBrowserFile file)
    {
        FileName = file.Name;

        // No need to decrypt and deserialize if it's already an extracted json save
        string save;
        if (AllowJson && FileName.EndsWith(".json"))
        {
            save = await new StreamReader(file.OpenReadStream()).ReadToEndAsync();
        }
        else if (FileName.EndsWith(".dat"))
        {
            save = await SaveCipher.DecryptSave(file.OpenReadStream());
        }
        else
        {
            return;
        }

        if (OnSaveLoad is not null)
        {
            await OnSaveLoad.Invoke(Prettify ? JsonUtils.Prettify(save) : save);
        }
    }

    private async Task OnFileDrop(IBrowserFile file)
    {
        await UploadFiles(file);
    }

    public void Dispose()
    {
        if (SaveDropContext is not null)
        {
            SaveDropContext.OnFileDrop -= OnFileDrop;
        }
    }
}