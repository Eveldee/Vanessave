@using Vanessave.Shared.Services
@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject IAppPreferencesProvider Preferences

<MyMudThemeProvider/>
<MyMudProviders/>

<PageTitle>Vanessave</PageTitle>

<SaveDrop>
    <div class="page mud-layout">

        <div class="sidebar mud-elevation-1">
            <div class="top-row mud-drawer-head">
                <div>
                    <a class="navbar-brand" href="@Navigation.BaseUri">Vanessave</a>
                </div>
            </div>

            <input type="checkbox" title="Navigation menu" class="navbar-toggler"/>
            <div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
                <NavMenu/>
            </div>

        </div>

        <main>
            <div class="top-row px-4">
                <MudToggleIconButton @bind-Toggled:get="@(IsDarkMode.HasValue && IsDarkMode!.Value)"
                                     @bind-Toggled:set="@(async value => { IsDarkMode = value; await UpdateDarkMode(); })"
                                     Icon="@Icons.Material.Filled.DarkMode" Color="Color.Inherit"
                                     ToggledIcon="@Icons.Material.Filled.LightMode" ToggledColor="Color.Warning"/>

                <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Style="color: white;" Link="https://github.com/Eveldee/Vanessave" Target="_blank"/>
            </div>

            <MudContainer MaxWidth="MaxWidth.Large" Class="my-2 pt-2">
                @* <MudScrollToTop> *@
                @*     <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.KeyboardArrowUp" /> *@
                @* </MudScrollToTop> *@
                @Body
            </MudContainer>
        </main>
    </div>
</SaveDrop>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code
{
    private bool? IsDarkMode { get; set; } = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsDarkMode = await Preferences.IsDarkModeAsync();

            StateHasChanged();
        }
    }

    private async Task UpdateDarkMode()
    {
        if (IsDarkMode is not null)
        {
            await Preferences.SetDarkModeAsync(IsDarkMode.Value);
        }
    }
}
