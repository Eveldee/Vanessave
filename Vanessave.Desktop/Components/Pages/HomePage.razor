@using System.IO
@using NativeFileDialogs.Net
@using Vanessave.Desktop.Components.Dialogs
@using Vanessave.Desktop.Models
@using Vanessave.Desktop.Services
@using Vanessave.Desktop.Utils
@using Vanessave.Shared.Utils
@using Vanessave.Shared.Utils.Extensions
@inject WorkspacesService WorkspacesService
@inject SavesManager SavesManager
@inject TabBarService TabBar
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<div id="homepage">
    <MudSpacer/>

    <MudStack Row="true" Justify="Justify.SpaceEvenly" Class="mt-10" Style="user-select: none">
        <MudPaper Class="main-button" Outlined="true" @onclick="AddGameInstallButtonClick">
            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                <MudIcon Color="Color.Secondary" Size="Size.Large" Icon="@Icons.Material.Filled.LibraryAdd"/>
                <MudText Color="Color.Secondary" >Add game installation</MudText>
            </MudStack>
        </MudPaper>
        <MudPaper Class="main-button" Outlined="true" @onclick="OpenSaveSettingsButtonClick">
            <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                <MudIcon Color="Color.Secondary" Size="Size.Large" Icon="@Icons.Material.Filled.FileOpen"/>
                <MudText Color="Color.Secondary" >Open save/settings</MudText>
            </MudStack>
        </MudPaper>
    </MudStack>

    <MudDivider Class="ma-10" FlexItem="true" DividerType="DividerType.Middle"/>

    <MudText Typo="Typo.h5" Class="ma-3">Game installations</MudText>
    <MudPaper Outlined="true" Class="px-5">
        @foreach (var (workspace, first) in WorkspacesService.Workspaces.OrderBy(w => w.Name).WithFirst())
        {
            if (!first)
            {
                <MudDivider DividerType="DividerType.FullWidth" />
            }

            <MudStack Row="true">
                <div class="py-5 flex-1 workspace" @onclick="() => OpenWorkspace(workspace)">
                    <MudText Color="Color.Secondary" Typo="Typo.subtitle1">@workspace.Name</MudText>
                    <MudText Typo="Typo.caption">@workspace.Path</MudText>
                </div>
                <MudTooltip RootClass="d-flex" Text="Rename">
                    <MudIconButton Class="action-button" Color="Color.Primary" Icon="@Icons.Material.Filled.DriveFileRenameOutline" OnClick="() => RenameButtonClick(workspace)"/>
                </MudTooltip>
                <MudTooltip RootClass="d-flex" Text="Remove">
                    <MudIconButton Class="action-button" Color="Color.Secondary" Icon="@Icons.Material.Filled.Close" @onclick="() => DeleteButtonClick(workspace)"/>
                </MudTooltip>
            </MudStack>
        }
    </MudPaper>

    <MudSpacer/>
    <MudSpacer/>
</div>

@code {

    private async Task AddGameInstallButtonClick()
    {
        Workspace? workspace = null;
        var initialCount = WorkspacesService.Workspaces.Count();

        await Task.Run(() => workspace = WorkspacesService.Add(Snackbar));

        if (workspace is not null)
        {
            // Ask for name if it's a new workspace
            if (WorkspacesService.Workspaces.Count() > initialCount)
            {
                await RenameButtonClick(workspace, false);
            }

            OpenWorkspace(workspace);
        }
    }

    private async Task OpenSaveSettingsButtonClick()
    {
        // Pick a save/settings file
        // Run on thread pool to avoid UI lock and crash
        NfdStatus? dialogResult = null;
        string? path = null;

        await Task.Run(() =>
        {
            try
            {
                dialogResult = Nfd.OpenDialog(out path, FileUtils.SaveSettingsFilters);
            }
            catch
            {
                dialogResult = null;
            }
        });

        if (dialogResult != NfdStatus.Ok || path is null)
        {
            return;
        }

        var fileInfo = new FileInfo(path);

        // Try reading the file as a save
        if (await SavesManager.ReadGameSave(fileInfo) is { } gameSave)
        {
            var saveInfo = new SaveInfo(
                SaveType.GameSave,
                fileInfo.Name,
                NobetaUtils.StageToFriendlyName(gameSave),
                gameSave.Basic.Difficulty,
                gameSave.Basic.GameCleared,
                fileInfo
            );

            TabBar.OpenSave(saveInfo);
        }
        // Try reading the file as system settings
        else if (await SavesManager.ReadSystemSettings(fileInfo) is { } systemSettings)
        {
            TabBar.OpenSettings(fileInfo);
        }
        // Invalid file
        else
        {
            Snackbar.AddError("Invalid save or settings file");
        }
    }

    private void OpenWorkspace(Workspace workspace)
    {
        WorkspacesService.Open(workspace);
    }

    private async Task RenameButtonClick(Workspace workspace, bool cancelable = true)
    {
        var parameters = new DialogParameters<RenameDialog>
        {
            { renameDialog => renameDialog.OldName, workspace.Name },
            { renameDialog => renameDialog.Cancelable, cancelable }
        };

        var dialog = await DialogService.ShowAsync<RenameDialog>("Rename installation", parameters);
        var result = await dialog.Result;

        if (result.Canceled)
        {
            return;
        }

        WorkspacesService.UpdateName(workspace, (string)result.Data);
    }

    private void DeleteButtonClick(Workspace workspace)
    {
        WorkspacesService.Remove(workspace);
    }

}